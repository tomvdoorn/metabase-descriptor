version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: metabase-descriptor-db
    environment:
      POSTGRES_DB: metabase_descriptor_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metabase-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: metabase-descriptor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metabase-network

  # Backend Development
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend.dev
    container_name: metabase-descriptor-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/metabase_descriptor_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: development-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: development-refresh-secret-change-in-production
      API_PORT: 3001
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - metabase-network

  # Frontend Development
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend.dev
    container_name: metabase-descriptor-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - metabase-network

  # Database Management Tool (Optional)
  adminer:
    image: adminer:4.8.1
    container_name: metabase-descriptor-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - metabase-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  metabase-network:
    driver: bridge